/**
 * shiny-sorter
 * Endpoint definitions for the shiny-sorter file sorting project
 *
 * OpenAPI spec version: alpha-v0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { FileEntry } from '../model/fileEntry';
import { FilePatch } from '../model/filePatch';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FilesService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Creates a new file entry
     * @param id File name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFile(id: string, observe?: 'body', reportProgress?: boolean): Observable<FileEntry>;
    public createFile(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileEntry>>;
    public createFile(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileEntry>>;
    public createFile(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.post<FileEntry>(`${this.basePath}/files/${encodeURIComponent(String(id))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets the file metadata with the specified id
     * @param id File ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFileById(id: string, observe?: 'body', reportProgress?: boolean): Observable<FileEntry>;
    public getFileById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileEntry>>;
    public getFileById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileEntry>>;
    public getFileById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFileById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<FileEntry>(`${this.basePath}/files/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets the file contents with the specified id
     * @param id File ID
     * @param thumb Whether to return the actual contents or a thumbnail
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFileContent(id: string, thumb?: boolean, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getFileContent(id: string, thumb?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getFileContent(id: string, thumb?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getFileContent(id: string, thumb?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFileContent.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (thumb !== undefined && thumb !== null) {
            queryParameters = queryParameters.set('thumb', <any>thumb);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<string>(`${this.basePath}/files/contents/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Lists and queries files
     * @param includeTags Tags to include in this query, referenced by tag ID
     * @param includeOperator Whether includeTags requires all tags to match, or just one
     * @param excludeTags Tags to exclude in this query, referenced by tag ID
     * @param excludeOperator Whether excludeTags requires all tags to match, or just one
     * @param hasBeenTagged Whether to filter to tags that have or have not been tagged
     * @param page The page to access
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFiles(includeTags?: Array<number>, includeOperator?: 'all' | 'any', excludeTags?: Array<number>, excludeOperator?: 'all' | 'any', hasBeenTagged?: boolean, page?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<FileEntry>>;
    public listFiles(includeTags?: Array<number>, includeOperator?: 'all' | 'any', excludeTags?: Array<number>, excludeOperator?: 'all' | 'any', hasBeenTagged?: boolean, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FileEntry>>>;
    public listFiles(includeTags?: Array<number>, includeOperator?: 'all' | 'any', excludeTags?: Array<number>, excludeOperator?: 'all' | 'any', hasBeenTagged?: boolean, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FileEntry>>>;
    public listFiles(includeTags?: Array<number>, includeOperator?: 'all' | 'any', excludeTags?: Array<number>, excludeOperator?: 'all' | 'any', hasBeenTagged?: boolean, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (includeTags) {
            queryParameters = queryParameters.set('includeTags', includeTags.join(COLLECTION_FORMATS['csv']));
        }
        if (includeOperator !== undefined && includeOperator !== null) {
            queryParameters = queryParameters.set('includeOperator', <any>includeOperator);
        }
        if (excludeTags) {
            queryParameters = queryParameters.set('excludeTags', excludeTags.join(COLLECTION_FORMATS['csv']));
        }
        if (excludeOperator !== undefined && excludeOperator !== null) {
            queryParameters = queryParameters.set('excludeOperator', <any>excludeOperator);
        }
        if (hasBeenTagged !== undefined && hasBeenTagged !== null) {
            queryParameters = queryParameters.set('hasBeenTagged', <any>hasBeenTagged);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<Array<FileEntry>>(`${this.basePath}/files`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Modifies the file metadata with the specified id
     * @param id File ID
     * @param patch Patch modifications for the file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchFileById(id: string, patch: FilePatch, observe?: 'body', reportProgress?: boolean): Observable<FileEntry>;
    public patchFileById(id: string, patch: FilePatch, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileEntry>>;
    public patchFileById(id: string, patch: FilePatch, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileEntry>>;
    public patchFileById(id: string, patch: FilePatch, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchFileById.');
        }

        if (patch === null || patch === undefined) {
            throw new Error('Required parameter patch was null or undefined when calling patchFileById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<FileEntry>(`${this.basePath}/files/${encodeURIComponent(String(id))}`,
            patch,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Sets the file contents for the specified id
     * @param id File ID
     * @param fileContents The file contents to upload.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setFileContent(id: string, fileContents?: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setFileContent(id: string, fileContents?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setFileContent(id: string, fileContents?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setFileContent(id: string, fileContents?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setFileContent.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (fileContents !== undefined) {
            formParams = formParams.append('fileContents', <any>fileContents) || formParams;
        }

        return this.httpClient.patch<any>(`${this.basePath}/files/contents/${encodeURIComponent(String(id))}`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
